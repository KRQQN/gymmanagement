// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gym {
  id            String    @id @default(cuid())
  name          String
  address       String
  phone         String?
  email         String?
  apiKey        String    @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  users         User[]
  membershipPlans MembershipPlan[]
  checkIns      CheckIn[]
  payments      Payment[]
  classes       GymClass[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  gym           Gym?      @relation(fields: [gymId], references: [id])
  gymId         String?
  accounts      Account[]
  sessions      Session[]
  membership    Membership?
  checkIns      CheckIn[]
  payments      Payment[]
  classes       GymClass[]

  @@index([gymId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MembershipPlan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  features    String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  gym         Gym      @relation(fields: [gymId], references: [id])
  gymId       String
  memberships Membership[]

  @@index([gymId])
}

model Membership {
  id            String           @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  type          MembershipType
  status        MembershipStatus @default(ACTIVE)
  price         Float
  stripeSubscriptionId String?
  stripeCustomerId String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String           @unique
  plan          MembershipPlan   @relation(fields: [planId], references: [id])
  planId        String

  @@index([planId])
}

model CheckIn {
  id            String    @id @default(cuid())
  checkInTime   DateTime  @default(now())
  checkOutTime  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  gym           Gym       @relation(fields: [gymId], references: [id])
  gymId         String

  @@index([gymId])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  status        PaymentStatus
  paymentMethod PaymentMethod
  stripeSessionId String?     @unique
  stripePaymentIntentId String?
  stripeSubscriptionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  gym           Gym           @relation(fields: [gymId], references: [id])
  gymId         String

  @@index([gymId])
}

model GymClass {
  id            String   @id @default(cuid())
  name          String
  description   String
  schedule      Json
  duration      Int
  capacity      Int
  bookedSpots   Int      @default(0)
  category      String?
  difficulty    String?
  equipment     String[]
  requirements  String[]
  instructor    String?  // Optional instructor name
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  gym           Gym      @relation(fields: [gymId], references: [id])
  gymId         String
  attendees     User[]   // Many-to-many with User

  @@index([gymId])
}

enum UserRole {
  ADMIN
  STAFF
  MEMBER
}

enum MembershipType {
  ONE_DAY
  ONE_WEEK
  ONE_MONTH
  SIX_MONTHS
  ANNUAL
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  ONLINE
}
